import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react'
import styles from '../styles/Home.module.css'
import { QueryClient, QueryClientProvider, useQuery } from '@tanstack/react-query'

const queryClient = new QueryClient()
const Home: NextPage = () => {
  return (
    <QueryClientProvider client={queryClient}>

    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>
        <Counter></Counter>
        <PokemonUseEffect />
       <PokemonReactQuery />
        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.tsx</code>
        </p>

        <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/canary/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
      </div>
    </QueryClientProvider>

  )
}

function Counter() {
  const [count, setCount] = useState(0);
  return <div>
    <div>{count}</div>
    <button onClick={() => setCount(count + 1)}>Add</button>
    <button onClick={() => setCount(count - 1)}>Subtract</button>
  </div>
}

type Pokemon = {
  name: string,
  url: string,
}

type State = {
  pokemon: Pokemon[],
  loading: boolean,
  error: Error | null,
}

// Needs to be a single state object to set two at once
function PokemonUseEffect() {
  const [pokemon, setPokemon] = useState<State>({pokemon: [], loading: false, error: null});

  useEffect(() => {
    async function fetchPokemon(): Promise<State> {
      const state: State = { pokemon: [], loading: false, error: null};
      try {
        const res = await fetch('https://pokeapi.co/api/v2/pokemon?limit=5');
        await delay(3000);
        if(Math.random() > 0.7)
          throw Error("Use Effect Error");
        const pokemon = await res.json();
        if (pokemon.results)
          state.pokemon = pokemon.results;
      } catch (err) {
        console.error(err);
        if (err instanceof Error)
          state.error = err;
      }
      return state;
    }
    console.log("mount");
    setPokemon({ loading: true, pokemon: [], error: null });
    fetchPokemon().then((state) => {
      console.log("set poke", state);
      setPokemon(state);
    });

  }, []);

  if (pokemon.loading) return <div>Loading ...</div>

  if (pokemon.error) return <div>An error has occurred: {pokemon.error.message }</div>

  return <div>
    <div>Pokemon Use Effect</div>
  <div>{pokemon.pokemon.map((poke) => <div key={poke.name}>{poke.name}</div>)}
    </div>
  </div>
}
async function delay(ms: number) {
  return new Promise(res => setTimeout(res, ms));
}

function PokemonReactQuery() {
  const fetchPokemon = async (): Promise<Pokemon[]> => {
    const res = await fetch('https://pokeapi.co/api/v2/pokemon?limit=5');
    const pokemon = await res.json();
    await delay(3000);
    if(Math.random() > 0.7)
      throw Error("React Query Error")
    return (pokemon.results as Pokemon[]);
  }

  const { isLoading, error, data } = useQuery<Pokemon[], Error>(['pokemon'],
    fetchPokemon,
    {retry: 0}
  )

  if (isLoading) return <div>Loading...</div>

  if (error) return <div>An error has occurred: {error.message }</div>

  return <div>
    <div>Pokemon React Query</div>
    <div>{data?.map((poke) => <div key={poke.name}>{poke.name}</div>)}
    </div>
  </div>
}


export default Home
